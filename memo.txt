# パッケージ
@material-ui/core       // materialUI
@material-ui/icons
@material-ui/styles
connected-react-router  // reduxと一緒にreact-routerを使うのに便利
firebase                // Firebase
history                 // router関連。以前どこのURLにいたかなどを記憶
react-redux             // reactと一緒にreduxを使う
react-router            // ルーティング
redux                   // redux
redux-actions           // reduxでactionを作る時に使える
redux-logger            // stateの差分などを表示
redux-thunk             // reduxのなかで非同期処理の完了を待つ
reselect                // selectorで使う


# re-ducsパターン
Reduxのディレクトリ構成のことでファイルを管理しやすくなる。Ducksパターンから派生した。

## Ducksパターン以前 (同じ名前のファイルが多くできてactionsを書いているのかreducersを書いているのかなどがわかりにくい)
actions/
  - products.js
  - users.js
reducers/
  - products.js
  - users.js

## Ducksパターン (関連するactionsやreducersを１つのファイルにまとめた。ファイルが肥大化しやすいのがデメリット)
modules/
  - products.js
  - users.js

## re-ducksパターン (関連するディレクトリにactionsやreducersなどのファイルを分ける)
// メリット actionsとreducersがシンプルになる。ファイルが肥大化しにくくなる。ファイルごとの役割が明確で管理しやすい。
users/
  - actions.js    // アプリから受け取ったデータをreducersに渡す
  - index.js
  - operation.js  // 複雑な処理を任される(非同期処理の制御). Actionsを呼び出す.
  - reducers.js   // storeの値を変更する
  - selectors.js   // storeから特定の値を参照する
  - types.ts      // TypeScriptで使う。型定義を記述してexport

products/
  - actions.js
  - index.js
  - operation.js
  - reducers.js
  - selectors.js
  - types.ts

# redux-thunk
Reduxで非同期処理を制御するライブラリ

通常のActionsはaction objectを受け取る
 関数を受け取ることができない
  async,awaitやPromiseが使えない!


# ルールを変更しないとfirestoreを操作できない。
firestore.rulesで設定

ルールのみ適用するコマンド
$ firebase deploy --only firestore:rules


# Firebase Auth メソッド
https://firebase.google.com/docs/auth/web/manage-users?hl=ja

- createUserWithEmailAndPassword()  新規ユーザ作成
- signInWIthEmailAndPassword()      サインイン
  引数: email: string, password: string
  戻り値: Promise<firebase.auth.UserCredential>


- onAuthStateChanged() 認証状態を監視して変化が有ったら戻り値を返す
  引数: なし
  戻り値: firebase.Observer | firebase.User

- sendPasswordResetEmail() パスワードリセットメースを送信する
  引数: email: string
  戻り値: Promise<void>

# Tailwind cheat cheet
https://nerdcave.com/tailwind-cheat-sheet

# material ui ブレイクポイント
smは600px
dowmなら未満, upなら以上で適用
theme.breakpoints.down('sm')